<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0045)http://www.cnblogs.com/yylp521/p/3568828.html -->
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cn"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script async="" type="text/javascript" src="./装箱和拆箱，枚举的ToString浅析_files/gpt.js"></script>

<title>C# 程序性能提升篇-1、装箱和拆箱，枚举的ToString浅析 - yylp521 - 博客园</title>
<link type="text/css" rel="stylesheet" href="./装箱和拆箱，枚举的ToString浅析_files/blog-common.css">
<link id="MainCss" type="text/css" rel="stylesheet" href="./装箱和拆箱，枚举的ToString浅析_files/style.css">
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/yylp521/rss">
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/yylp521/rsd.xml">
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/yylp521/wlwmanifest.xml">
<script src="./装箱和拆箱，枚举的ToString浅析_files/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'yylp521', cb_enable_mathjax=false;</script>
<script src="./装箱和拆箱，枚举的ToString浅析_files/blog-common.js" type="text/javascript"></script>
<script async="" type="text/javascript" src="./装箱和拆箱，枚举的ToString浅析_files/pubads_impl_32.js"></script><script type="text/javascript" src="./装箱和拆箱，枚举的ToString浅析_files/osd.js"></script></head>
<body>
<a name="top"></a>

<div id="home">
<div id="header">
	<div id="blogTitle">
		
<!--done-->
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/yylp521/">yylp521</a></div>
<div class="subtitle">追求卓越，成功将会不期而至。</div>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li id="nav_sitehome"><a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
<li id="nav_myhome"><a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/yylp521/">首页</a></li>
<li id="nav_q"><a class="menu" href="http://q.cnblogs.com/">博问</a></li>
<li id="nav_ing"><a class="menu" href="http://home.cnblogs.com/ing/">闪存</a></li>
<li id="nav_newpost"><a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://www.cnblogs.com/yylp521/admin/EditPosts.aspx?opt=1">新随笔</a></li>
<li id="nav_contact"><a id="MyLinks1_ContactLink" class="menu" rel="nofollow" href="http://space.cnblogs.com/msg/send/yylp521">联系</a></li>
<li id="nav_rss"><a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/yylp521/rss">订阅</a>
<!--<a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/yylp521/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li id="nav_admin"><a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://www.cnblogs.com/yylp521/admin/EditPosts.aspx">管理</a></li>
</ul>

		<div class="blogStats">
			
			
<!--done-->
随笔-37&nbsp;
文章-0&nbsp;
评论-32&nbsp;

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		

<!--done-->
<div id="topics">
	<div class="post">
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="./装箱和拆箱，枚举的ToString浅析_files/装箱和拆箱，枚举的ToString浅析.htm">C# 程序性能提升篇-1、装箱和拆箱，枚举的ToString浅析</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body"><p><span style="font-size: 18pt;">前景提要：</span></p>
<p>　　编写程序时，也许你不经意间，就不知不觉的使程序代码，发生了装箱和拆箱，从而降低了效率，不要说就发生那么一次两次，如果说是程序中发生了循环、网络程序（不断请求处理的）等这些时候，减少装箱和拆箱，是优化程序提高效率的一种途径。不仅跬步，无以至千里，不积小流，无以至江河。优化从点点滴滴做起。</p>
<p><span style="font-size: 18pt;">一、装箱拆箱概念：</span></p>
<p>　　这里是官方定义：<a href="http://msdn.microsoft.com/zh-cn/library/yz2be5wk.aspx">http://msdn.microsoft.com/zh-cn/library/yz2be5wk.aspx</a></p>
<p>　　装箱：值类型→引用类型</p>
<p>　　拆箱：引用类型→值类型</p>
<p><span style="color: #ff0000; font-size: 18pt;">二、为什么说装箱，拆箱消耗资源（内存、cpu）？</span></p>
<p>　　<span style="font-size: 14pt;">2.1&nbsp;图说装箱、拆箱</span></p>
<p>　　　　<img src="./装箱和拆箱，枚举的ToString浅析_files/261100580044156.jpg" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<img src="./装箱和拆箱，枚举的ToString浅析_files/261102051199191.jpg" alt=""></p>
<p>　　　　说明：装箱。值类型存放于内存栈上，引用类型存放于内存对上。如果将已定义好的值类型（栈上的数据）修改至引用类型（堆上），</p>
<p>　　<span style="font-size: 14pt;">2.2&nbsp;图文说 装箱过程</span></p>
<p>　　　　值类型存储（没有堆什么事）：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;引用类型存储（栈中存储的是，堆中对象的地址，堆中是实际对象）</p>
<p>　　　　<img src="./装箱和拆箱，枚举的ToString浅析_files/261108499257392.jpg" alt="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img src="./装箱和拆箱，枚举的ToString浅析_files/261114060865085.jpg" alt=""></p>
<p>　　　　这时如果，<span style="color: #ff0000;"><strong>将值类型变成引用类型，存储的位置发生变化，发生了装箱，而且为了拆箱，现在引用类型的存储模式也不仅仅是以上引用类型的存储模型了，</strong><strong>值类型的类型也会进行相应的存储，以方便在拆箱时候，转换成相应装箱时的类型。</strong></span></p>
<p>　　　　这样可以看出，装箱，其实比你直接定义成一个引用类型，给家消耗了内存，以及增加了计算量（消耗了cpu）。这是原理级别的解释，跟深入的，我也不太清除。只能分析到CLR这一步。</p>
<p><span style="font-size: 18pt;">三、浅谈ToString()</span></p>
<p>　　估计大家都知道，C#所有的类型基类（父类）均是Object，而Object中，提供的能叫子类继承的方法就那么几个，virtual&nbsp;的ToString就是其中之一，所以说，c#中所有的类型均有这个ToString方法。下面就浅谈一下ToString方法在装箱拆箱中的一二。</p>
<p>　　<span style="font-size: 14pt;">3.1&nbsp;针对普通值类型</span></p>
<p>　　　　以Int32为例（Struct）</p>
<p>　　　　　　int&nbsp;a=123;<br>　　　　　　string b=a.ToString();</p>
<p>　　　　　　　　请问这是发生装箱了吗？</p>
<p>　　　　　　答：值类型→引用类型，oh，装箱！！</p>
<p>　　　　　　解答：只单纯的看装箱定义，这确实符合装箱的定义。但是，别忘记了ToString是基类的虚方法，子类是否对其有重写。</p>
<p>　　　　　　　　int&nbsp;的&nbsp;户口祖籍</p>
<p>　　　　　　　　int（C#语言）→Int32（CLR，oh是个结构，<span style="color: #1000a0;">struct</span>）</p>
<p>　　　　　　　　　　→<span style="color: #1000a0;">extends</span> System.ValueType（查看IL代码，发现了）→<span style="color: #1000a0;">extends</span> System.Object（这是终极祖宗啊！这里有ToString啊）</p>
<p><span style="color: #1000a0;">　　　　　　　　这是Int32中对ToString方法的重写：</span></p>
<p><span style="color: #1000a0;">　　　　　　　　　　　　public</span> <span style="color: #1000a0;">override</span> string <strong>ToString</strong>() { <span style="color: #1000a0;">return</span> Number.FormatInt32(<span style="color: #1000a0;">this</span>, <span style="color: #800000;">null</span>, NumberFormatInfo.CurrentInfo);}</p>
<p>　　　　　　　　接下来就是内部的实现了，我去，看不到了啊?怎么办？</p>
<p>　　　　　　对了编写代码，查看IL代码。</p>
<p>　　　　　　<img src="./装箱和拆箱，枚举的ToString浅析_files/261152222424907.jpg" alt=""></p>
<p>　　　　　　可以看出这里没有发生装箱啊！具体的深入内部实现可以借助反编译工具，查看，如ILSpy、reflecter、ILdasm等。</p>
<p>　　</p>
<p>　　<span style="font-size: 14pt;">3.2枚举类型</span></p>
<p>　　　　那么所有的值类型是不是使用Tostring方法，均不涉及装箱操作呢？这个也不尽然，可是尝试一下枚举类型。</p>
<p>　　　　<span style="color: #ff0000;">枚举类型</span>，是一个值类型。</p>
<p>　　　　示例：</p>
<p>　　　　　　enum TestEnum { Test1, Test2&nbsp;&nbsp; }</p>
<p><span style="color: blue;">　　　　　　string</span>&nbsp;test&nbsp;=&nbsp;<span style="color: #2b91af;">TestEnum</span>.Test1.ToString();
//这句话是否发生装箱操作</p>
<p>　　</p>
<p>　　　　3.2.1&nbsp;内部原理</p>
<p>　　　　　　首先查看枚举中的ToString方法，这里重写了ToString方法</p>
<p>　　　　　　<span style="color: #1000a0;">public</span> <span style="color: #1000a0;">override</span> string <strong>ToString</strong>() { <span style="color: #1000a0;">return</span> InternalFormat((RuntimeType) <span style="color: #1000a0;">base</span>.GetType(), <span style="color: #1000a0;">this</span>.GetValue());}</p>
<p>　　　　　　查看InternalFormat方法的实现</p>
<p>　　　　　　　　private static string InternalFormat(RuntimeType eT, object value)<br>　　　　　　　　{<br>&nbsp;&nbsp;&nbsp; 　　　　　　　　if (eT.IsDefined(typeof(FlagsAttribute), false))<br>&nbsp;&nbsp;&nbsp; 　　　　　　　　{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 　　　　　　　　return InternalFlagsFormat(eT, value);<br>&nbsp;&nbsp;&nbsp; 　　　　　　　　}<br>&nbsp;&nbsp;&nbsp; 　　　　　　　　string name = GetName(eT, value);<br>&nbsp;&nbsp;&nbsp;　　　　　　　　 if (name == null)<br>&nbsp;&nbsp;&nbsp; 　　　　　　　　{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 　　　　　　　　return value.ToString();<br>&nbsp;&nbsp;&nbsp; 　　　　　　　　}<br>&nbsp;&nbsp;&nbsp; 　　　　　　　　return name;<br>　　　　　　　　}</p>
<p>　　</p>
<p>&nbsp;　　　　　　通过查看可知eT.IsDefined(<span style="color: #1000a0;">typeof</span>(FlagsAttribute), <span style="color: #800000;">false</span>)、GetName()，这里使用了反射，可能会有性能的损失，但是不会有装箱操作</p>
<p>　　　　　　 但GetName（eT,value）,中的value参数是InternalFormat中的参数，这里的参数是object类型，</p>
<p>　　　　　　　　而InternalFormat((RuntimeType) <span style="color: #1000a0;">base</span>.GetType(), <span style="color: #1000a0;">this</span>.GetValue())调用时，这里的使用了this.GetValue这个方法来传递这个object参数</p>
<p>　　　　　　&nbsp;接下来查看&nbsp;GetValue方法的实现啦</p>
<p>　　　　　　　　<img src="./装箱和拆箱，枚举的ToString浅析_files/261320196773060.jpg" alt=""></p>
<p>　　　　　　可以看出关于这个GetValue方法中发生了，装箱操作，return &nbsp;(bool) *(((sbyte*) ptrRef));&nbsp;这个一个值类型，而GetValue需要的返回值是：Object类型</p>
<p><strong><span style="color: #ff0000;">　　　　<span style="font-size: 16px;">结论</span>，枚举中重写的ToString方法不仅使用到了装箱操作，而且还是用到了大量的反射。</span></strong></p>
<p>　　　　<span style="color: #ff0000;">综上所述，使用枚举时，只是针对值类型操作，增加几个常量状态switch-case，以及不涉及取出枚举定义的值（ToString）则是非常方便的，快速的。</span></p>
<p><span style="color: #ff0000;">　　　　　　但是要是经常使用枚举的ToString取得枚举的定义值，则不建议使用。这里是非常不合时宜的。可以直接使用静态类代替即可（使用空间换取时间）</span></p>
<p>　　<span style="font-size: 14pt;">3.3&nbsp;分析网络大牛的技术博客</span></p>
<p>　　　　原本装箱、拆箱感觉写的差不多了，但是看到网上那么多大牛、那么写感觉有点不合适啊！（不要被他们所谓的比较性能吓到哦）</p>
<p>　　　　3.3.1 博客地址：<a href="http://www.cnblogs.com/XmNotes/archive/2010/09/18/1830355.html">http://www.cnblogs.com/XmNotes/archive/2010/09/18/1830355.html</a></p>
<p>　　　　　　这是第一个：<span style="color: #ff0000;"><span style="color: #ff0000;">性能相差7千倍的ToString方法</span>&nbsp;&nbsp;<span style="color: #000000;">的博客</span></span></p>
<p><span style="color: #ff0000;">　　　　　　</span><span style="color: #ff0000; font-size: 16px;"><strong>解说</strong></span>：看到标题，第一句想说的是，我靠！这么雷人啊。7千倍啊！</p>
<p>　　　　　　　　但是一看代码你就知道他在干嘛了</p>
<p>　　　　　　　　　　<code class="csharp keyword">var</code> <code class="csharp plain">day = DayOfWeek.Wednesday; //这可是枚举啊</code></p>
<p>　　　　　　　　　　<code class="csharp keyword">for</code> <code class="csharp plain">(</code><code class="csharp keyword">int</code> <code class="csharp plain">i = 0; i &lt; 1000000; i++)</code><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">{</code><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">value = day.ToString();</code><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">}</code></p>
<p>　　　　　　　　百万级别的反射、装箱。你坑人呢吧，不说实际有没有这么百万级别的数量和这么频繁的操作，就说有你这么用的吗！</p>
<p>　　　　　　　　　　一种是你直接返回一个值类型的星期，最后表现层给你转换一下，即使这里装箱、拆箱也就是这么一次两个，还能百万级别的刷啊！</p>
<p>　　　　　　　　　　还有就是类似你的第二种，直接就是操作引用类型的，如果像你这样百万级别的在转换一下，弄成静态常量。　</p>
<p>　　　　　　　结论是：举例要以事实做依据，不要做不符合实际的事情。不同的方法、类库用于适合的场景。这里不仅仅反射会耗时，装箱操作也会造成资源的消耗</p>
<p>　　　　3.3.2&nbsp;博客地址：<a href="http://www.cnblogs.com/yjmyzz/archive/2010/09/19/1830766.html">http://www.cnblogs.com/yjmyzz/archive/2010/09/19/1830766.html</a></p>
<p>　　　　　　这是第二个：<span style="color: #ff0000;"><span style="color: #ff0000;">也谈枚举ToString()性能的改进&nbsp;</span></span>的博客</p>
<p><span style="color: #ff0000;"><span style="color: #ff0000;">　　　　　　</span></span><span style="color: #000000;"><span style="font-size: 16px;"><strong><span style="color: #ff0000;">解说</span></strong></span>：我不理解楼主在干吗，你定义的静态类，在第一次使用的时候，就已经将枚举装到静态变量dictionary中了，常驻内存了，直到程序结束才推出。</span></p>
<p><span style="color: #ff0000;"><span style="color: #ff0000;"><span style="color: #000000;">　　　　　　　　&nbsp; 类似于你没事循环读取百万级别的一个静态变量啊！</span></span></span></p>
<p><span style="color: #ff0000;"><span style="color: #ff0000;"><span style="color: #000000;">　　　　　　　　　而使用枚举的ToString方法，是你在百万级别的反射、装箱数据啊！</span></span></span></p>
<p><span style="color: #ff0000;"><span style="color: #ff0000;"><span style="color: #000000;">　　　　　　&nbsp; 我晕啊！枚举是这样用，这样理解的吗？</span></span></span></p>
<p><span style="color: #ff0000;"><span style="color: #ff0000;"><span style="color: #000000;">　　　　　　　　如果这几个定义你常用、百万级别读取的话，你能不能稍微浪费点内存啊！直接这样用啊（空间换取时间）</span></span></span></p>
<pre><span style="color: blue;">　　　　　　　　　　public</span>&nbsp;<span style="color: blue;">static</span>&nbsp;<span style="color: blue;">class</span>&nbsp;<span style="color: #2b91af;">EnumLoginError</span>
　　　　　　　　　　{
&nbsp;&nbsp;&nbsp;&nbsp;　　　　　　　　　　<span style="color: blue;">public</span>&nbsp;<span style="color: blue;">static</span>&nbsp;<span style="color: blue;">string</span>&nbsp;用户名不存在&nbsp;{&nbsp;<span style="color: blue;">get</span>{<span style="color: blue;">return</span>&nbsp;<span style="color: #a31515;">"用户名不存在"</span>;}}
&nbsp;&nbsp;&nbsp;&nbsp;　　　　　　　　　　<span style="color: blue;">public</span>&nbsp;<span style="color: blue;">static</span>&nbsp;<span style="color: blue;">string</span>&nbsp;密码错误&nbsp;{&nbsp;<span style="color: blue;">get</span>{<span style="color: blue;">return</span>&nbsp;<span style="color: #a31515;">"密码错误"</span>;}}
&nbsp;&nbsp;&nbsp;&nbsp;　　　　　　　　　　<span style="color: blue;">public</span>&nbsp;<span style="color: blue;">static</span>&nbsp;<span style="color: blue;">string</span>&nbsp;用户被锁定&nbsp;{&nbsp;<span style="color: blue;">get</span>{<span style="color: blue;">return</span>&nbsp;<span style="color: #a31515;">"用户被锁定"</span>;}}
&nbsp;&nbsp;&nbsp;&nbsp;　　　　　　　　　　<span style="color: blue;">public</span>&nbsp;<span style="color: blue;">static</span>&nbsp;<span style="color: blue;">string</span>&nbsp;未知错误&nbsp;{&nbsp;<span style="color: blue;">get</span>{<span style="color: blue;">return</span>&nbsp;<span style="color: #a31515;">"未知错误"</span>;}}
　　　　　　　　　　}<br>　　　　　　<span style="font-size: 14px;">结论是：不要做画蛇添足的事情，对待事物要有怀疑精神。还是合适的工具做合适的活，合适的人做合适事情。<br></span><span style="font-size: 18pt;"><br>四、能够减少拆箱装箱，常用的替代类库</span><br><span style="font-size: 14px;">　　<span style="font-size: 16px;">4.1&nbsp;推荐使用泛型集合</span><br></span><br><span style="font-size: 14px;">　　　　命名空间System.Collections.Generic</span><br><span style="font-size: 14px;">　　　　<span style="color: #ff0000;">List&lt;T&gt;类似于ArrayList，ArrayList的升级版。</span></span><br><span style="font-size: 14px;">　　　　　　各种方法：Sort()、Max()、Min()、Sum()…</span><br><span style="font-size: 14px;">　　　　<span style="color: #ff0000;">Dictionary&lt;K,V&gt;类似于Hashtable，Hashtable的升级版。</span></span><br><span style="font-size: 14px;">　　　　T,K,V就像一把锁，锁住集合只能存某种特定的类型，这里的T,K,V也可以是其它字母</span></pre>
</div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="blog_post_info"><div id="BlogPostCategory">分类: <a href="http://www.cnblogs.com/yylp521/category/375304.html">C#</a></div>
<div id="EntryTag"></div>
<div id="green_channel">
绿色通道：
<a href="javascript:void(0);" id="green_channel_digg" onclick="DiggIt(cb_entryId,cb_blogId,1);green_channel_success(this,&#39;谢谢推荐！&#39;);">好文要顶</a>
<a id="green_channel_follow" onclick="c_follow();" href="javascript:void(0);">关注我</a>
<a id="green_channel_favorite" onclick="AddToWz(cb_entryId);return false;" href="javascript:void(0);">收藏该文</a><a id="green_channel_contact" href="http://space.cnblogs.com/msg/send/yylp521" target="_blank">与我联系</a>
<a id="green_channel_weibo" href="javascript:void(0);" title="分享至新浪微博" onclick="ShareToTsina()"><img src="./装箱和拆箱，枚举的ToString浅析_files/icon_weibo_24.png" alt=""></a>
</div>
<div id="author_profile">
<div id="author_profile_info" class="author_profile_info">
<a href="http://home.cnblogs.com/u/yylp521/" target="_blank"><img src="./装箱和拆箱，枚举的ToString浅析_files/20130715084529.png" class="author_avatar" alt=""></a>
<div id="author_profile_detail" class="author_profile_info">
<a href="http://home.cnblogs.com/u/yylp521/">yylp521</a><br>
<a href="http://home.cnblogs.com/u/yylp521/followees">关注 - 10</a><br>
<a href="http://home.cnblogs.com/u/yylp521/followers">粉丝 - 27</a>
</div>
</div>
<div class="clear"></div>
<div id="author_profile_honor"></div>
<div id="author_profile_follow">
    <a href="javascript:void(0);" onclick="c_follow();return false;">+加关注</a>
</div>
</div>
<div id="div_digg">										
	<div class="diggit" onclick="votePost(cb_entryId,&#39;Digg&#39;)"> 
		<span class="diggnum" id="digg_count">0</span>
	</div>
	<div class="buryit" onclick="votePost(cb_entryId,&#39;Bury&#39;)"> 
		<span class="burynum" id="bury_count">0</span>
	</div>
	<div class="clear"></div>	
	<div class="diggword" id="digg_tips">
    (请您对文章做出评价)
    </div>	
</div>
</div>
<div class="clear"></div>
<div id="post_next_prev"><a href="http://www.cnblogs.com/yylp521/p/3547963.html" class="p_n_p_prefix">« </a> 上一篇：<a href="http://www.cnblogs.com/yylp521/p/3547963.html" title="发布于2014-02-13 14:38">Webservices-2.C#创建web服务，及引用访问、代码访问</a><br></div>
</div>


		</div>
		<div class="postDesc">posted @ <span id="post-date">2014-02-26 15:04</span> <a href="http://www.cnblogs.com/yylp521/">yylp521</a> 阅读(<span id="post_view_count">42</span>) 评论(<span id="post_comment_count">0</span>)  <a href="http://www.cnblogs.com/yylp521/admin/EditPosts.aspx?postid=3568828" rel="nofollow">编辑</a> <a href="http://www.cnblogs.com/yylp521/p/3568828.html#" onclick="AddToWz(3568828);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,isLogined=true,cb_blogId=91033,cb_entryId=3568828,cb_blogApp=currentBlogApp,cb_blogUserGuid='40385459-f168-e011-a53f-842b2b196315',cb_entryCreatedDate='2014/2/26 15:04:00';loadViewCount(cb_entryId);</script>
	
</div><!--end: topics 文章、评论容器-->
<a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="http://www.cnblogs.com/yylp521/p/3568828.html#" onclick="return RefreshPage();">刷新页面</a><a href="http://www.cnblogs.com/yylp521/p/3568828.html#top">返回顶部</a></div>
<div id="comment_form_container"><div id="commentform_title">发表评论</div>
<span id="tip_comment" style="color:Red"></span>
<p>
昵称：<input type="text" id="tbCommentAuthor" class="author" disabled="disabled" size="50" value="微冷的雨">
</p>
<div class="commentbox_main">
<div class="commentbox_title">
<div class="commentbox_title_left">评论内容：</div>
<div class="commentbox_title_right">
<img id="ubb_quote" class="comment_icon" src="./装箱和拆箱，枚举的ToString浅析_files/quote.gif" alt="引用" title="添加引用" onclick="insertUBB(&#39;tbCommentBody&#39;,&#39;quote&#39;)">
<img id="ubb_bold" class="comment_icon" src="./装箱和拆箱，枚举的ToString浅析_files/b.png" alt="粗体" title="添加粗体" onclick="insertUBB(&#39;tbCommentBody&#39;,&#39;b&#39;)">
<img id="ubb_url" class="comment_icon" src="./装箱和拆箱，枚举的ToString浅析_files/lk.png" alt="链接" title="添加链接" onclick="insertUbbUrl(&#39;tbCommentBody&#39;)">
<img id="ubb_indent" class="comment_icon" src="./装箱和拆箱，枚举的ToString浅析_files/indent.png" alt="缩进" title="添加首行缩进" onclick="insertIndent(&#39;tbCommentBody&#39;)">
<img id="ubb_code" class="comment_icon" src="./装箱和拆箱，枚举的ToString浅析_files/InsertCode.gif" alt="代码" title="添加代码" onclick="insertUbbCode()">
<img id="ubb_img" class="comment_icon" src="./装箱和拆箱，枚举的ToString浅析_files/img.gif" alt="图片" title="上传图片" onclick="OpenImageUploadWindow();">
</div>
</div>
<div class="clear"></div>
<textarea id="tbCommentBody" class="comment_textarea" rows="20" cols="50"></textarea>
</div>
<p id="commentbox_opt">
<input id="btn_comment_submit" type="button" class="comment_btn" value="提交评论">
<span id="span_comment_canceledit" style="display:none"><a href="javascript:void(0);" onclick="return CancelCommentEdit()">不改了</a></span>
<a href="javascript:void(0);" onclick="return logout();">注销</a>
        <a id="commentbox_opt_sub" href="javascript:void(0);" title="订阅后有新评论时会邮件通知您" onclick="commentManager.Subscribe()">订阅评论</a>
</p>
<p>
[使用Ctrl+Enter键快速提交]
</p>
<div style="display:none">
<span id="comment_edit_id"></span><span id="span_parentcomment_id"></span>
<span id="span_parent_id"></span>
<span id="span_comment_replyto"></span>
<span id="span_comment_posted"></span>
</div>
</div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"><a href="http://job.cnblogs.com/" target="_blank">程序员找工作，就在博客园招聘频道</a></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="程序员的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="ad_under_post_holder">

<div id="google_ad_c1" class="c_ad_block">
    <!-- cnblogs_blogpost_C1_sitehome -->
    <div id="div-gpt-ad-1346480159711-0" style="width:300px; height:250px;">
    
    <div id="google_ads_iframe_/1090369/cnblogs_blogpost_C1_sitehome_0__container__" style="border-top-width: 0pt; border-right-width: 0pt; border-bottom-width: 0pt; border-left-width: 0pt; border-top-style: none; border-right-style: none; border-bottom-style: none; border-left-style: none; border-color: initial; "><iframe id="google_ads_iframe_/1090369/cnblogs_blogpost_C1_sitehome_0" name="google_ads_iframe_/1090369/cnblogs_blogpost_C1_sitehome_0" width="300" height="250" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" style="border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; vertical-align: bottom; " src="javascript:"<html><body style='background:transparent'></body></html>""></iframe></div><iframe id="google_ads_iframe_/1090369/cnblogs_blogpost_C1_sitehome_0__hidden__" name="google_ads_iframe_/1090369/cnblogs_blogpost_C1_sitehome_0__hidden__" width="0" height="0" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" style="border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; vertical-align: bottom; visibility: hidden; display: none; " src="javascript:"<html><body style='background:transparent'></body></html>""></iframe></div>
</div>
<div id="blog_news_kb"><div class="itnews c_ad_block"><b>最新IT新闻</b>:<br> ·  <a href="http://news.cnblogs.com/n/201434/" target="_blank">算法：有向无环图的最短路径</a><br> ·  <a href="http://news.cnblogs.com/n/201433/" target="_blank">硅谷大佬：什么样的游戏公司值得投资?</a><br> ·  <a href="http://news.cnblogs.com/n/201432/" target="_blank">特斯拉将在中国打造超级充电网：先覆盖上海北京</a><br> ·  <a href="http://news.cnblogs.com/n/201431/" target="_blank">高科技：“珠洗”洗衣机</a><br> ·  <a href="http://news.cnblogs.com/n/201430/" target="_blank">Ask Jamie：实习生如何创造改变？</a><br>» <a href="http://news.cnblogs.com/" title="IT新闻" target="_blank">更多新闻...</a></div><div class="itnews c_ad_block" id="kb_block"><b>最新知识库文章</b>:<br><div id="kb_recent"> ·  <a href="http://kb.cnblogs.com/page/191521/" target="_blank">指尖上的浏览：如何理解用户的眼？</a><br> ·  <a href="http://kb.cnblogs.com/page/200929/" target="_blank">Node.js 究竟是什么？</a><br> ·  <a href="http://kb.cnblogs.com/page/194376/" target="_blank">Habya'a（临时拼凑的组件）与技术债务</a><br> ·  <a href="http://kb.cnblogs.com/page/200528/" target="_blank">关于在线教育和线下教育的六个问题</a><br> ·  <a href="http://kb.cnblogs.com/page/199787/" target="_blank">别错把需求当市场</a><br></div>» <a href="http://kb.cnblogs.com/" target="_blank">更多知识库文章...</a></div></div></div>
<script type="text/javascript">
var enableGoogleAd = true;
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
fixPostBodyFormat();
loadAdUnderPost();
</script>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
loadBlogSignature();
LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
</script>
<script type="text/javascript">
    $.ajax({ url: 'http://counter.cnblogs.com/blog/post/' + cb_entryId, type: 'get', dataType: 'script', cache: true });
</script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"><div style="width:200px;height:100px;color:red">
<h3>欢迎大家访问留言，交流互动！</h3><br>
本人博客，仅代表个人观点。
</div><div id="profile_block">昵称：<a href="http://home.cnblogs.com/u/yylp521/">yylp521</a><br>园龄：<a href="http://home.cnblogs.com/u/yylp521/" title="入园时间：2011-04-17">2年10个月</a><br>粉丝：<a href="http://home.cnblogs.com/u/yylp521/followers/">27</a><br>关注：<a href="http://home.cnblogs.com/u/yylp521/followees/">10</a><div id="p_b_follow"><a href="javascript:void(0);" onclick="cnblogs.UserManager.FollowBlogger(&#39;40385459-f168-e011-a53f-842b2b196315&#39;)">+加关注</a></div><div id="p_b_ing"><a href="http://home.cnblogs.com/ing/my/">我的闪存</a></div></div></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script></div>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn">

<div class="mySearch">
<h3 class="catListTitle">搜索</h3>
<div id="widget_my_zzk" class="div_my_zzk"><input type="text" id="q" onkeydown="return zzk_go_enter(event);" class="input_my_zzk">&nbsp;<input onclick="zzk_go()" type="button" value="找找看" id="btnZzk" class="btn_my_zzk"></div>
<div id="widget_my_google" class="div_my_zzk"><input type="text" name="google_q" id="google_q" onkeydown="return google_go_enter(event)" class="input_my_zzk">&nbsp;<input onclick="google_go()" type="button" value="谷歌搜索" class="btn_my_zzk"></div>
</div>


<div class="catListPostCategory">
<h3 class="catListTitle">随笔分类<span style="font-size:11px;font-weight:normal">(46)</span></h3>

<ul>

<li><a id="ctl01_CatList_LinkList_0_Link_0" href="http://www.cnblogs.com/yylp521/category/455336.html">ADO.NET(1)</a> </li>

<li><a id="ctl01_CatList_LinkList_0_Link_1" href="http://www.cnblogs.com/yylp521/category/431337.html">Ajax&amp;jquery(2)</a> </li>

<li><a id="ctl01_CatList_LinkList_0_Link_2" href="http://www.cnblogs.com/yylp521/category/490757.html">asp.net(5)</a> </li>

<li><a id="ctl01_CatList_LinkList_0_Link_3" href="http://www.cnblogs.com/yylp521/category/375304.html">C#(14)</a> </li>

<li><a id="ctl01_CatList_LinkList_0_Link_4" href="http://www.cnblogs.com/yylp521/category/548103.html">C#内网、跨平台数据服务(3)</a> </li>

<li><a id="ctl01_CatList_LinkList_0_Link_5" href="http://www.cnblogs.com/yylp521/category/490760.html">C、C++(1)</a> </li>

<li><a id="ctl01_CatList_LinkList_0_Link_6" href="http://www.cnblogs.com/yylp521/category/495719.html">Entity Framework(2)</a> </li>

<li><a id="ctl01_CatList_LinkList_0_Link_7" href="http://www.cnblogs.com/yylp521/category/439021.html">javascript 基础(4)</a> </li>

<li><a id="ctl01_CatList_LinkList_0_Link_8" href="http://www.cnblogs.com/yylp521/category/465858.html">Mono for Android学习(4)</a> </li>

<li><a id="ctl01_CatList_LinkList_0_Link_9" href="http://www.cnblogs.com/yylp521/category/520569.html">Sencha Touch(2)</a> </li>

<li><a id="ctl01_CatList_LinkList_0_Link_10" href="http://www.cnblogs.com/yylp521/category/490761.html">Visual Studio使用(1)</a> </li>

<li><a id="ctl01_CatList_LinkList_0_Link_11" href="http://www.cnblogs.com/yylp521/category/455241.html">操作系统(1)</a> </li>

<li><a id="ctl01_CatList_LinkList_0_Link_12" href="http://www.cnblogs.com/yylp521/category/525476.html">面试(1)</a> </li>

<li><a id="ctl01_CatList_LinkList_0_Link_13" href="http://www.cnblogs.com/yylp521/category/375305.html">数据库(5)</a> </li>

</ul>

</div>

<div class="catListPostArchive">
<h3 class="catListTitle">随笔档案<span style="font-size:11px;font-weight:normal">(38)</span></h3>

<ul>

<li><a id="ctl01_CatList_LinkList_1_Link_0" href="http://www.cnblogs.com/yylp521/archive/2014/02.html">2014年2月 (3)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_1" href="http://www.cnblogs.com/yylp521/archive/2014/01.html">2014年1月 (1)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_2" href="http://www.cnblogs.com/yylp521/archive/2013/12.html">2013年12月 (1)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_3" href="http://www.cnblogs.com/yylp521/archive/2013/11.html">2013年11月 (1)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_4" href="http://www.cnblogs.com/yylp521/archive/2013/10.html">2013年10月 (1)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_5" href="http://www.cnblogs.com/yylp521/archive/2013/09.html">2013年9月 (1)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_6" href="http://www.cnblogs.com/yylp521/archive/2013/08.html">2013年8月 (1)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_7" href="http://www.cnblogs.com/yylp521/archive/2013/07.html">2013年7月 (3)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_8" href="http://www.cnblogs.com/yylp521/archive/2013/06.html">2013年6月 (1)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_9" href="http://www.cnblogs.com/yylp521/archive/2013/05.html">2013年5月 (1)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_10" href="http://www.cnblogs.com/yylp521/archive/2013/04.html">2013年4月 (3)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_11" href="http://www.cnblogs.com/yylp521/archive/2013/03.html">2013年3月 (1)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_12" href="http://www.cnblogs.com/yylp521/archive/2013/02.html">2013年2月 (1)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_13" href="http://www.cnblogs.com/yylp521/archive/2012/12.html">2012年12月 (3)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_14" href="http://www.cnblogs.com/yylp521/archive/2012/11.html">2012年11月 (2)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_15" href="http://www.cnblogs.com/yylp521/archive/2012/05.html">2012年5月 (1)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_16" href="http://www.cnblogs.com/yylp521/archive/2012/04.html">2012年4月 (3)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_17" href="http://www.cnblogs.com/yylp521/archive/2012/03.html">2012年3月 (1)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_18" href="http://www.cnblogs.com/yylp521/archive/2011/12.html">2011年12月 (3)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_19" href="http://www.cnblogs.com/yylp521/archive/2011/11.html">2011年11月 (5)</a> </li>

<li><a id="ctl01_CatList_LinkList_1_Link_20" href="http://www.cnblogs.com/yylp521/archive/2011/06.html">2011年6月 (1)</a> </li>

</ul>

</div>


<div class="catListView">
<h3 class="catListTitle">阅读排行榜</h3>
	<div id="TopViewPostsBlock"><ul><li><a href="http://www.cnblogs.com/yylp521/archive/2012/04/09/2438676.html">1. Visual studio 中调试oracle数据库的程序，出现“未找到Oracle客户端和网络组件”解决(2774)</a></li><li><a href="http://www.cnblogs.com/yylp521/p/3148856.html">2. C#解析JSON几种方式-整理(2450)</a></li><li><a href="http://www.cnblogs.com/yylp521/p/3177400.html">3. C# ORM—Entity Framework 之Code first（代码优先）（二）(1787)</a></li><li><a href="http://www.cnblogs.com/yylp521/archive/2013/03/31/2991780.html">4. 一、mono for android学习：什么是mono for android（使用C#开发android）(1477)</a></li><li><a href="http://www.cnblogs.com/yylp521/archive/2011/12/08/2281410.html">5. 缓存、动态页面静态化、网站优化(转)(1452)</a></li></ul></div>
</div>

<div class="catListView">
<h3 class="catListTitle">推荐排行榜</h3>
<div id="TopDiggPostsBlock"><ul><li><a href="http://www.cnblogs.com/yylp521/p/3177400.html">1. C# ORM—Entity Framework 之Code first（代码优先）（二）(6)</a></li><li><a href="http://www.cnblogs.com/yylp521/p/3148856.html">2. C#解析JSON几种方式-整理(3)</a></li><li><a href="http://www.cnblogs.com/yylp521/p/3174864.html">3. C# ORM—Entity Framework 之Database first（数据库优先）&amp;Model First（模型优先）（一）(2)</a></li><li><a href="http://www.cnblogs.com/yylp521/archive/2012/11/22/wpf%E4%B8%8Ejs.html">4. javascript与Windows Presentation Foundation交互通讯（js与wpf通讯）(2)</a></li><li><a href="http://www.cnblogs.com/yylp521/archive/2013/03/31/2991780.html">5. 一、mono for android学习：什么是mono for android（使用C#开发android）(2)</a></li></ul></div>
</div></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright ©2014 yylp521
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->
<!--PageEndHtml Block Begin-->
<div style="background-color:gray;width:100%;height:30px;text-align:center">
Copyright ©2013 李宏旭
</div>
<!--PageEndHtml Block End-->


<iframe id="google_osd_static_frame_4192209369502" name="google_osd_static_frame" style="display: none; width: 0px; height: 0px; "></iframe></body></html>